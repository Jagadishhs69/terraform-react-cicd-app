name: EC2 Docker Build & Deploy React to ECR

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment name (dev/qa/prod)"
        required: true
        default: "dev"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Docker Image
        run: |
          IMAGE="${{ secrets.ECR_REPO_URL }}"
          docker build -t $IMAGE:latest .
          docker push $IMAGE:latest

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to EC2 via SSM
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${{ github.event.inputs.environment }}-app-ec2" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text)

          echo "Deploying to Instance: $INSTANCE_ID"

          aws ssm send-command \
            --targets "Key=instanceIds,Values=$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy React App Docker Container" \
            --parameters 'commands=[
              "REGION=${{ secrets.AWS_REGION }}",
              "ECR_URL=${{ secrets.ECR_REPO_URL }}",
              "CONTAINER=react-app",

              "echo Logging in to ECR",
              "aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $(echo $ECR_URL | cut -d/ -f1)",

              "echo Stopping old container",
              "docker rm -f $CONTAINER || true",

              "echo Pulling latest image",
              "docker pull $ECR_URL:latest",

              "echo Running new container",
              "docker run -d --name $CONTAINER -p 80:80 $ECR_URL:latest"
            ]'
